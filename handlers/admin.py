from aiogram import Router, F, Bot, Dispatcher
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from config import get_welcome_message, update_welcome_message
from models import BroadcastByIdStates, ChannelStates, CustomButtonStates
from database import db
from models import AddUserStates, EditUserStates, DeleteUserStates, BroadcastStates, WelcomeMessageStates

from utils.keyboards import (
    get_admin_keyboard, 
    get_user_action_keyboard, 
    get_cancel_keyboard,
    get_admin_inline_keyboard,
    get_main_keyboard,
    get_start_keyboard,
    get_button_management_keyboard,
    get_button_edit_keyboard
)
from utils.helpers import (
    check_admin,
    cancel_state,
    format_user_list,
    send_error_message,
    send_success_message
)

import asyncio
import logging

logger = logging.getLogger(__name__)

router = Router()
# –ó–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é get_channel_name –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ handlers/admin.py:

async def get_channel_info(bot: Bot, channel_id: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –ø–æ –µ–≥–æ ID"""
    try:
        chat = await bot.get_chat(channel_id)
        if chat.title:
            return f"{chat.title}"
        elif chat.username:
            return f"@{chat.username}"
        else:
            return f"ID: {channel_id}"
    except Exception as e:
        logger.error(f"Failed to get channel info for {channel_id}: {e}")
        return f"ID: {channel_id}"

@router.message(F.text == "üìã –ö–∞–Ω–∞–ª –¥–ª—è —Å—Å—ã–ª–æ–∫")
async def cmd_set_links_channel(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫"""
    if not await check_admin(message):
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    current_channel_id = db.get_channel("links")
    if current_channel_id:
        current_status = await get_channel_info(bot, current_channel_id)
    else:
        current_status = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    
    await message.answer(
        f"üìã –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –¥–ª—è —Å—Å—ã–ª–æ–∫: {current_status}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫.\n"
        "–í–∞–∂–Ω–æ: –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.",
        reply_markup=get_cancel_keyboard()
    )
    await state.update_data(channel_type="links")
    await state.set_state(ChannelStates.waiting_for_channel_id)

@router.message(F.text == "üí¨ –ö–∞–Ω–∞–ª –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π")
async def cmd_set_messages_channel(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not await check_admin(message):
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    current_channel_id = db.get_channel("messages")
    if current_channel_id:
        current_status = await get_channel_info(bot, current_channel_id)
    else:
        current_status = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    
    await message.answer(
        f"üí¨ –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π: {current_status}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        "–í–∞–∂–Ω–æ: –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.",
        reply_markup=get_cancel_keyboard()
    )
    await state.update_data(channel_type="messages")
    await state.set_state(ChannelStates.waiting_for_channel_id)
# –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ handlers/admin.py –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–æ–≤:

@router.message(ChannelStates.waiting_for_channel_id)
async def process_channel_id(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∫–∞–Ω–∞–ª–∞"""
    if await cancel_state(message, state):
        return

    channel_id = message.text.strip()
    state_data = await state.get_data()
    channel_type = state_data.get('channel_type')

    logger.info(f"Attempting to set channel {channel_type} to {channel_id}")

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        test_message = await bot.send_message(
            chat_id=channel_id,
            text="‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞"
        )
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        await test_message.delete()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        save_result = db.set_channel(channel_type, channel_id)
        logger.info(f"Channel save result: {save_result}")
        
        if save_result:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
            saved_channel = db.get_channel(channel_type)
            logger.info(f"Saved channel ID: {saved_channel}")
            
            channel_type_text = "—Å—Å—ã–ª–æ–∫" if channel_type == "links" else "—Å–æ–æ–±—â–µ–Ω–∏–π"
            await send_success_message(
                message,
                f"–ö–∞–Ω–∞–ª –¥–ª—è {channel_type_text} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
                f"–ù–æ–≤—ã–π ID: {channel_id}"
            )
        else:
            await send_error_message(
                message,
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞"
            )

    except Exception as e:
        logger.error(f"Error setting channel: {e}")
        await send_error_message(
            message,
            "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "1. ID –∫–∞–Ω–∞–ª–∞ —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω–æ\n"
            "2. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª\n"
            "3. –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())
    await state.clear()

def get_display_name(user_data, username):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    user_id = user_data[0]
    username = user_data[1]
    telegram_id = user_data[2] if len(user_data) > 2 else None
    link = user_data[3] if len(user_data) > 3 else None
    full_name = user_data[4] if len(user_data) > 4 else None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å full_name –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
    if full_name and full_name.strip():
        return f"{full_name} (@{username})"
    else:
        return username

def get_display_name_from_user_info(user_info, username):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    # user_info –º–æ–∂–µ—Ç –±—ã—Ç—å (username, telegram_id, link) –∏–ª–∏ (username, telegram_id, link, full_name)
    if len(user_info) >= 4:  # –ï—Å—Ç—å –ø–æ–ª–µ full_name
        full_name = user_info[3]
        if full_name and full_name.strip():
            return f"{full_name} (@{username})"
    
    return username

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–º–µ–Ω–∞–º–∏

@router.message(F.text == "üì© –°–æ–æ–±—â–µ–Ω–∏–µ")
@router.message(Command("broadcast_by_id"))
async def cmd_broadcast_by_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast_by_id –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ ID"""
    if not await check_admin(message):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = db.get_all_users()
    if not users:
        await send_error_message(message, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.", reply_markup=get_admin_keyboard())
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö ID –∏ –∏–º–µ–Ω–∞–º–∏
    user_list = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user_data in users:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        user_id = user_data[0]
        username = user_data[1]
        telegram_id = user_data[2] if len(user_data) > 2 else None
        link = user_data[3] if len(user_data) > 3 else None
        full_name = user_data[4] if len(user_data) > 4 else None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å full_name –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
        if full_name and full_name.strip():
            display_name = f"{full_name} (@{username})"
        else:
            display_name = username
        
        user_list += f"üë§ ID: {user_id} | {display_name}"
        if telegram_id:
            user_list += f" | ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (TG ID: {telegram_id})"
        else:
            user_list += " | ‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
        user_list += "\n"
    
    user_list += "\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:"
    
    await message.answer(user_list, reply_markup=get_cancel_keyboard())
    await state.set_state(BroadcastByIdStates.waiting_for_user_id)


@router.message(BroadcastByIdStates.waiting_for_user_id)
async def process_user_id_for_broadcast(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if await cancel_state(message, state):
        return
    
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await send_error_message(
            message, 
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
    user = db.get_user_by_id(user_id)
    if not user:
        await send_error_message(
            message, 
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_admin_keyboard()
        )
        await state.clear()
        return
    
    # user = (username, telegram_id, link)
    username = user[0]
    telegram_id = user[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not telegram_id:
        await send_error_message(
            message,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ. "
            f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.",
            reply_markup=get_admin_keyboard()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        target_user_id=user_id, 
        target_username=username,
        target_telegram_id=telegram_id
    )
    
    # –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
    await message.answer(
        f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id}, TG ID: {telegram_id})\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç), –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(BroadcastByIdStates.waiting_for_content)
    
@router.message(BroadcastByIdStates.waiting_for_content)
async def process_broadcast_by_id_content(message: Message, state: FSMContext, bot: Bot):
    if await cancel_state(message, state):
        return

    data = await state.get_data()
    target_id = int(data['target_telegram_id'])

    try:
        # –°–∫–æ–ø–∏—Ä—É–µ–º –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º
        await bot.copy_message(
            chat_id=target_id,
            from_chat_id=message.chat.id,
            message_id=message.message_id
        )
        await send_success_message(
            message,
            f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {data['target_username']}."
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–ø–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:")
        await send_error_message(
            message,
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}"
        )
    finally:
        await state.clear()

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è handlers/admin.py

@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")
@router.message(Command("edituser"))
async def cmd_edit_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await check_admin(message):
        return
    
    users = db.get_all_users()
    if not users:
        await send_error_message(message, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.", reply_markup=get_admin_keyboard())
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–º–µ–Ω–∞–º–∏
    user_list = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user_data in users:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        user_id = user_data[0]
        username = user_data[1]
        telegram_id = user_data[2] if len(user_data) > 2 else None
        link = user_data[3] if len(user_data) > 3 else None
        full_name = user_data[4] if len(user_data) > 4 else None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å full_name –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
        if full_name and full_name.strip():
            display_name = f"{full_name} (@{username})"
        else:
            display_name = username
        
        user_list += f"üë§ ID: {user_id} | {display_name}"
        if telegram_id:
            user_list += " | ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
        else:
            user_list += " | ‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
        user_list += "\n"
    
    user_list += "\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    
    await message.answer(user_list, reply_markup=get_cancel_keyboard())
    await state.set_state(EditUserStates.waiting_for_user_id)

@router.message(EditUserStates.waiting_for_user_id)
async def process_edit_user_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    if await cancel_state(message, state):
        return
    
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await send_error_message(
            message, 
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user_by_id(user_id)
    if not user:
        await send_error_message(
            message, 
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_admin_keyboard()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(user_id=user_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = user[0]
    telegram_id = user[1] if len(user) > 1 else None
    link = user[2] if len(user) > 2 else None
    full_name = user[3] if len(user) > 3 else None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å full_name –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
    if full_name and full_name.strip():
        display_name = f"{full_name} (@{username})"
    else:
        display_name = username
    
    info_text = (
        f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
        f"üë§ –ò–º—è: {display_name}\n"
        f"üìù –õ–æ–≥–∏–Ω: {username}\n"
        f"üÜî ID: {user_id}\n"
        f"üì± Telegram ID: {telegram_id or '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}\n"
        f"üîó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {link or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
        f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    )
    
    await message.answer(info_text, reply_markup=get_user_action_keyboard())
    await state.set_state(EditUserStates.waiting_for_action)


@router.message(EditUserStates.waiting_for_action)
async def process_edit_action(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if await cancel_state(message, state):
        return
    
    action = message.text.strip()
    
    if action == "–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω:", reply_markup=get_cancel_keyboard())
        await state.set_state(EditUserStates.waiting_for_new_username)
    elif action == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:", reply_markup=get_cancel_keyboard())
        await state.set_state(EditUserStates.waiting_for_new_password)
    else:
        await send_error_message(
            message, 
            "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.",
            reply_markup=get_user_action_keyboard()
        )

@router.message(EditUserStates.waiting_for_new_username)
async def process_new_username_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∏–Ω–∞"""
    if await cancel_state(message, state):
        return
    
    new_username = message.text.strip()
    user_data = await state.get_data()
    user_id = user_data.get('user_id')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω
    existing_user = db.get_user_by_username(new_username)
    if existing_user and existing_user[0] != user_id:  # existing_user[0] - —ç—Ç–æ ID
        await send_error_message(
            message, 
            f"–õ–æ–≥–∏–Ω '{new_username}' —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
            reply_markup=get_admin_keyboard()
        )
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏–Ω
    if db.update_username(user_id, new_username):
        await send_success_message(
            message, 
            f"–õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_username}'",
            reply_markup=get_admin_keyboard()
        )
    else:
        await send_error_message(
            message, 
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=get_admin_keyboard()
        )
    
    await state.clear()

@router.message(EditUserStates.waiting_for_new_password)
async def process_new_password_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
    if await cancel_state(message, state):
        return
    
    new_password = message.text.strip()
    user_data = await state.get_data()
    user_id = user_data.get('user_id')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    if db.update_password(user_id, new_password):
        await send_success_message(
            message, 
            f"–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_password}'",
            reply_markup=get_admin_keyboard()
        )
    else:
        await send_error_message(
            message, 
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=get_admin_keyboard()
        )
    
    await state.clear()

@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å")
@router.message(Command("deleteuser"))
async def cmd_delete_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await check_admin(message):
        return
    
    users = db.get_all_users()
    if not users:
        await send_error_message(message, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.", reply_markup=get_admin_keyboard())
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–º–µ–Ω–∞–º–∏
    user_list = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user_data in users:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        user_id = user_data[0]
        username = user_data[1]
        telegram_id = user_data[2] if len(user_data) > 2 else None
        link = user_data[3] if len(user_data) > 3 else None
        full_name = user_data[4] if len(user_data) > 4 else None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å full_name –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
        if full_name and full_name.strip():
            display_name = f"{full_name} (@{username})"
        else:
            display_name = username
        
        user_list += f"üë§ ID: {user_id} | {display_name}"
        if telegram_id:
            user_list += " | ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
        else:
            user_list += " | ‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
        user_list += "\n"
    
    user_list += "\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    
    await message.answer(user_list, reply_markup=get_cancel_keyboard())
    await state.set_state(DeleteUserStates.waiting_for_user_id)

@router.message(DeleteUserStates.waiting_for_user_id)
async def process_delete_user_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if await cancel_state(message, state):
        return
    
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await send_error_message(
            message, 
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user_by_id(user_id)
    if not user:
        await send_error_message(
            message, 
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_admin_keyboard()
        )
        await state.clear()
        return
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = user[0]
    telegram_id = user[1] if len(user) > 1 else None
    link = user[2] if len(user) > 2 else None
    full_name = user[3] if len(user) > 3 else None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å full_name –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
    if full_name and full_name.strip():
        display_name = f"{full_name} (@{username})"
    else:
        display_name = username
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if db.delete_user(user_id):
        await send_success_message(
            message, 
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{display_name}' (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            reply_markup=get_admin_keyboard()
        )
    else:
        await send_error_message(
            message, 
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{display_name}' (ID: {user_id})",
            reply_markup=get_admin_keyboard()
        )
    
    await state.clear()

# –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
@router.message(Command("broadcast"))
async def cmd_broadcast(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not await check_admin(message):
        return
    
    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç), "
        "–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(BroadcastStates.waiting_for_content)

@router.message(BroadcastStates.waiting_for_content)
async def process_broadcast_content(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if await cancel_state(message, state):
        return
    
    users = db.get_all_users()
    sent_count = 0
    failed_count = 0
    
    logger.info(f"Starting broadcast. Total users: {len(users)}")
    progress_msg = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    await message.answer(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
    
    for user_data in users:
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_id = user_data[0]
            username = user_data[1]
            telegram_id = user_data[2] if len(user_data) > 2 else None
            
            logger.info(f"Processing user: {username}, TG ID: {telegram_id}")
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ telegram_id –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            if not telegram_id:
                logger.info(f"Skipping user {username} - no telegram_id")
                continue
                
            if telegram_id == message.from_user.id:
                logger.info(f"Skipping sender {username}")
                continue
            
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            success = False
            
            # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message.text and not message.media_group_id:
                text = message.text.strip()
                formatted_message = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó:</b>\n\n{text}"
                await bot.send_message(
                    telegram_id,
                    formatted_message,
                    parse_mode="HTML"
                )
                success = True
            
            # –§–æ—Ç–æ
            elif message.photo:
                photo = message.photo[-1]
                caption = message.caption or ""
                formatted_caption = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó:</b>\n\n{caption}" if caption else "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó</b>"
                
                await bot.send_photo(
                    telegram_id,
                    photo=photo.file_id,
                    caption=formatted_caption,
                    parse_mode="HTML"
                )
                success = True
            
            # –í–∏–¥–µ–æ
            elif message.video:
                caption = message.caption or ""
                formatted_caption = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó:</b>\n\n{caption}" if caption else "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó</b>"
                
                await bot.send_video(
                    telegram_id,
                    video=message.video.file_id,
                    caption=formatted_caption,
                    parse_mode="HTML"
                )
                success = True
            
            # –ê—É–¥–∏–æ
            elif message.audio:
                caption = message.caption or ""
                formatted_caption = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó:</b>\n\n{caption}" if caption else "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó</b>"
                
                await bot.send_audio(
                    telegram_id,
                    audio=message.audio.file_id,
                    caption=formatted_caption,
                    parse_mode="HTML"
                )
                success = True
            
            # –î–æ–∫—É–º–µ–Ω—Ç
            elif message.document:
                caption = message.caption or ""
                formatted_caption = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó:</b>\n\n{caption}" if caption else "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó</b>"
                
                await bot.send_document(
                    telegram_id,
                    document=message.document.file_id,
                    caption=formatted_caption,
                    parse_mode="HTML"
                )
                success = True
            
            # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            elif message.voice:
                await bot.send_message(
                    telegram_id,
                    "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó</b>",
                    parse_mode="HTML"
                )
                await bot.send_voice(
                    telegram_id,
                    voice=message.voice.file_id
                )
                success = True
            
            # –°—Ç–∏–∫–µ—Ä
            elif message.sticker:
                await bot.send_message(
                    telegram_id,
                    "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó</b>",
                    parse_mode="HTML"
                )
                await bot.send_sticker(
                    telegram_id,
                    sticker=message.sticker.file_id
                )
                success = True
            
            # –ê–Ω–∏–º–∞—Ü–∏—è (GIF)
            elif message.animation:
                caption = message.caption or ""
                formatted_caption = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó:</b>\n\n{caption}" if caption else "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó</b>"
                
                await bot.send_animation(
                    telegram_id,
                    animation=message.animation.file_id,
                    caption=formatted_caption,
                    parse_mode="HTML"
                )
                success = True
            
            # –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ
            elif message.video_note:
                await bot.send_message(
                    telegram_id,
                    "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó</b>",
                    parse_mode="HTML"
                )
                await bot.send_video_note(
                    telegram_id,
                    video_note=message.video_note.file_id
                )
                success = True
            
            if success:
                sent_count += 1
                logger.info(f"Message sent successfully to user {username} (TG ID: {telegram_id})")
            else:
                failed_count += 1
                logger.warning(f"Unknown message type for user {username}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            if (sent_count + failed_count) % 5 == 0:
                try:
                    await progress_msg.edit_text(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {sent_count + failed_count}/{len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}")
                except:
                    pass
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await asyncio.sleep(0.3)
            
        except Exception as e:
            failed_count += 1
            logger.error(f"Failed to send message to user {username if 'username' in locals() else 'unknown'}: {e}")
            import traceback
            traceback.print_exc()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    try:
        await progress_msg.delete()
    except:
        pass
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    authorized_users = sum(1 for user_data in users if len(user_data) > 2 and user_data[2] is not None and user_data[2] != message.from_user.id)
    
    result_message = (
        f"üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
        f"üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö: {authorized_users}\n"
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count}"
    )
    
    logger.info(f"Broadcast completed. Sent: {sent_count}, Failed: {failed_count}")
    
    await send_success_message(message, result_message)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())
    await state.clear()

async def check_admin_and_get_users(message: Message) -> list:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not await check_admin(message):
        return None
        
    users = db.get_all_users()
    if not users:
        await send_error_message(message, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.", reply_markup=get_admin_keyboard())
        return None
    return users

@router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏"""
    users = await check_admin_and_get_users(message)
    if not users:
        return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —á–∞—Å—Ç–∏
    await send_user_list_in_parts(message, users)
    
    await message.answer(
        "–§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_admin_keyboard()
    )

async def send_user_list_in_parts(message: Message, users: list):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Å—Ç—è–º–∏"""
    if not users:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏
    MAX_MESSAGE_LENGTH = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –æ—Ç –ª–∏–º–∏—Ç–∞ –≤ 4096 —Å–∏–º–≤–æ–ª–æ–≤
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_entries = []
    for user_data in users:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–ª—è full_name
        user_id = user_data[0]
        username = user_data[1]
        telegram_id = user_data[2] if len(user_data) > 2 else None
        link = user_data[3] if len(user_data) > 3 else None
        full_name = user_data[4] if len(user_data) > 4 else None
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–∞—è –ø–∞—Ä–æ–ª—å
        from database import db
        user_db_data = db.get_user_by_username(username)
        password = user_db_data[1] if user_db_data else "–ù–µ –Ω–∞–π–¥–µ–Ω"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å full_name –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
        if full_name and full_name.strip():
            display_name = f"{full_name} (@{username})"
        else:
            display_name = username
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_text = f"ID: {user_id} | {display_name}\n"
        user_text += f"   –õ–æ–≥–∏–Ω: {username}\n"
        user_text += f"   –ü–∞—Ä–æ–ª—å: {password}\n"
        
        if telegram_id:
            user_text += f"   –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (TG ID: {telegram_id})\n"
        else:
            user_text += f"   –°—Ç–∞—Ç—É—Å: ‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω\n"
            
        user_text += f"   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {link or '‚Äî'}\n\n"
        
        user_entries.append(user_text)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    parts = []
    current_part = ""
    current_length = 0
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
    header = f"üìä –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Å–µ–≥–æ: {len(users)}):\n\n"
    
    for i, user_entry in enumerate(user_entries):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å –≤ —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
        entry_length = len(user_entry)
        
        # –î–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ —É—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if not current_part:
            test_length = len(header) + current_length + entry_length
        else:
            test_length = current_length + entry_length
        
        if test_length > MAX_MESSAGE_LENGTH and current_part:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë
            parts.append(current_part.rstrip())
            current_part = user_entry
            current_length = entry_length
        else:
            # –ï—Å–ª–∏ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
            current_part += user_entry
            current_length += entry_length
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
    if current_part:
        parts.append(current_part.rstrip())
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
    for i, part in enumerate(parts):
        if i == 0:
            # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            full_message = header + part
        else:
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ —Å –Ω–æ–º–µ—Ä–æ–º
            full_message = f"üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ {i + 1}):\n\n{part}"
        
        await message.answer(full_message)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        import asyncio
        await asyncio.sleep(0.1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if len(parts) > 1:
        await message.answer(f"üìù –ò—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ
    await message.answer("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /adduser")

@router.message(F.text == "üè™ –î–æ–±–∞–≤–∏—Ç—å")
@router.message(Command("adduser"))
async def cmd_add_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /adduser"""
    if not await check_admin(message):
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=get_cancel_keyboard())
    await state.set_state(AddUserStates.waiting_for_username)

@router.message(AddUserStates.waiting_for_username)
async def process_new_username(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if await cancel_state(message, state):
        return
    
    username = message.text.strip()
    if db.get_user_by_username(username):
        await send_error_message(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω.")
        return
    
    await state.update_data(username=username)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=get_cancel_keyboard())
    await state.set_state(AddUserStates.waiting_for_password)

@router.message(AddUserStates.waiting_for_password)
async def process_new_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if await cancel_state(message, state):
        return
        
    password = message.text.strip()
    user_data = await state.get_data()
    username = user_data.get('username')
    
    if db.add_user(username, password):
        await send_success_message(
            message,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n–õ–æ–≥–∏–Ω: {username}\n–ü–∞—Ä–æ–ª—å: {password}"
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())
    else:
        await send_error_message(
            message, 
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–º–æ–∂–Ω–æ, –ª–æ–≥–∏–Ω '{username}' —É–∂–µ –∑–∞–Ω—è—Ç.",
            reply_markup=get_admin_keyboard()
        )
    
    await state.clear()

@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
@router.message(Command("edit_welcome"))
async def cmd_edit_welcome(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not await check_admin(message):
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    await message.answer(
        f"–¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{get_welcome_message()}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É:\n"
        f"‚Ä¢ –ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞: <a href='https://example.com'>—Ç–µ–∫—Å—Ç</a>\n"
        f"‚Ä¢ –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç: <b>—Ç–µ–∫—Å—Ç</b>\n"
        f"‚Ä¢ –ö—É—Ä—Å–∏–≤: <i>—Ç–µ–∫—Å—Ç</i>\n\n"
        f"–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞:",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(WelcomeMessageStates.waiting_for_message)

@router.message(WelcomeMessageStates.waiting_for_message)
async def process_welcome_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if await cancel_state(message, state):
        return
    
    new_welcome_message = message.text.strip()
    if not new_welcome_message:
        await send_error_message(message, "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=get_admin_keyboard())
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å HTML
        test_msg = await message.answer(
            new_welcome_message,
            parse_mode="HTML"
        )
        await test_msg.delete()
        
        # –ï—Å–ª–∏ HTML –≤–∞–ª–∏–¥–Ω—ã–π, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update_welcome_message(new_welcome_message):
            await send_success_message(message, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            await send_error_message(
                message,
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                reply_markup=get_admin_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Failed to validate HTML in welcome message: {e}")
        await send_error_message(
            message,
            "–û—à–∏–±–∫–∞ –≤ HTML-—Ä–∞–∑–º–µ—Ç–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–µ–≥–æ–≤.",
            reply_markup=get_admin_keyboard()
        )
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())
    await state.clear()

def setup(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    dp.include_router(router)



@router.message(F.text == "üîò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏")
async def cmd_manage_buttons(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏"""
    if not await check_admin(message):
        return
    
    await message.answer(
        "üîò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=get_button_management_keyboard()
    )

@router.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ")
async def cmd_back_to_admin(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    if not await check_admin(message):
        return
    
    await message.answer("–§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=get_admin_keyboard())

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É")
async def cmd_add_button(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–Ω–æ–ø–∫–∏"""
    if not await check_admin(message):
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CustomButtonStates.waiting_for_button_name)

@router.message(CustomButtonStates.waiting_for_button_name)
async def process_button_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
    if await cancel_state(message, state):
        return
    
    button_name = message.text.strip()
    if not button_name:
        await send_error_message(message, "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    await state.update_data(button_name=button_name)
    await message.answer(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏: {button_name}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CustomButtonStates.waiting_for_button_url)

@router.message(CustomButtonStates.waiting_for_button_url)
async def process_button_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –∫–Ω–æ–ø–∫–∏"""
    if await cancel_state(message, state):
        return
    
    button_url = message.text.strip()
    if not button_url:
        await send_error_message(message, "–°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://
    if not (button_url.startswith('http://') or button_url.startswith('https://')):
        button_url = 'https://' + button_url
    
    user_data = await state.get_data()
    button_name = user_data.get('button_name')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if db.add_custom_button(button_name, button_url):
        await send_success_message(
            message,
            f"‚úÖ –ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {button_name}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {button_url}"
        )
    else:
        await send_error_message(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É.")
    
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏:", reply_markup=get_button_management_keyboard())
    await state.clear()

@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫")
async def cmd_list_buttons(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫"""
    if not await check_admin(message):
        return
    
    buttons = db.get_custom_buttons(active_only=False)
    
    if not buttons:
        await message.answer("üìã –ö–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    
    buttons_text = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫:\n\n"
    for button_data in buttons:
        button_id, name, url, is_active = button_data
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if is_active else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"
        buttons_text += f"üÜî ID: {button_id}\n"
        buttons_text += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        buttons_text += f"üîó –°—Å—ã–ª–∫–∞: {url}\n"
        buttons_text += f"üîÑ –°—Ç–∞—Ç—É—Å: {status}\n\n"
    
    await message.answer(buttons_text)
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏:", reply_markup=get_button_management_keyboard())

@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É")
async def cmd_edit_button(message: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–Ω–æ–ø–∫–∏"""
    if not await check_admin(message):
        return
    
    buttons = db.get_custom_buttons(active_only=False)
    
    if not buttons:
        await send_error_message(message, "–ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏:", reply_markup=get_button_management_keyboard())
        return
    
    buttons_text = "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n\n"
    for button_data in buttons:
        button_id, name, url, is_active = button_data
        status = "‚úÖ" if is_active else "‚ùå"
        buttons_text += f"üÜî {button_id}: {status} {name}\n"
    
    await message.answer(buttons_text, reply_markup=get_cancel_keyboard())
    await state.set_state(CustomButtonStates.waiting_for_button_id)
    await state.update_data(action="edit")  # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É!

@router.message(CustomButtonStates.waiting_for_button_id)
async def process_edit_button_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    if await cancel_state(message, state):
        return
    
    try:
        button_id = int(message.text.strip())
    except ValueError:
        await send_error_message(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –∫–Ω–æ–ø–∫–∏.")
        return
    
    button = db.get_custom_button_by_id(button_id)
    if not button:
        await send_error_message(message, f"–ö–Ω–æ–ø–∫–∞ —Å ID {button_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏:", reply_markup=get_button_management_keyboard())
        await state.clear()
        return
    
    button_id, name, url, is_active = button
    await state.update_data(button_id=button_id, current_name=name, current_url=url)
    
    await message.answer(
        f"üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:\n\n"
        f"üÜî ID: {button_id}\n"
        f"üìù –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"üîó –¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: {url}\n\n"
        f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=get_button_edit_keyboard()
    )
    await state.set_state(CustomButtonStates.waiting_for_edit_choice)

@router.message(CustomButtonStates.waiting_for_edit_choice)
async def process_edit_choice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å"""
    if await cancel_state(message, state):
        return
    
    choice = message.text.strip()
    
    if choice == "üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:", reply_markup=get_cancel_keyboard())
        await state.set_state(CustomButtonStates.waiting_for_new_name)
    elif choice == "üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:", reply_markup=get_cancel_keyboard())
        await state.set_state(CustomButtonStates.waiting_for_new_url)
    else:
        await send_error_message(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")

@router.message(CustomButtonStates.waiting_for_new_name)
async def process_new_button_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
    if await cancel_state(message, state):
        return
    
    new_name = message.text.strip()
    if not new_name:
        await send_error_message(message, "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    user_data = await state.get_data()
    button_id = user_data.get('button_id')
    
    if db.update_custom_button(button_id, name=new_name):
        await send_success_message(message, f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_name}'")
    else:
        await send_error_message(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏.")
    
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏:", reply_markup=get_button_management_keyboard())
    await state.clear()

@router.message(CustomButtonStates.waiting_for_new_url)
async def process_new_button_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ –∫–Ω–æ–ø–∫–∏"""
    if await cancel_state(message, state):
        return
    
    new_url = message.text.strip()
    if not new_url:
        await send_error_message(message, "–°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://
    if not (new_url.startswith('http://') or new_url.startswith('https://')):
        new_url = 'https://' + new_url
    
    user_data = await state.get_data()
    button_id = user_data.get('button_id')
    
    if db.update_custom_button(button_id, url=new_url):
        await send_success_message(message, f"–°—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{new_url}'")
    else:
        await send_error_message(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –∫–Ω–æ–ø–∫–∏.")
    
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏:", reply_markup=get_button_management_keyboard())
    await state.clear()

@router.message(F.text == "üîÑ –í–∫–ª/–í—ã–∫–ª –∫–Ω–æ–ø–∫—É")
async def cmd_toggle_button(message: Message, state: FSMContext):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏"""
    if not await check_admin(message):
        return
    
    buttons = db.get_custom_buttons(active_only=False)
    
    if not buttons:
        await send_error_message(message, "–ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è.")
        await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏:", reply_markup=get_button_management_keyboard())
        return
    
    buttons_text = "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n\n"
    for button_data in buttons:
        button_id, name, url, is_active = button_data
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if is_active else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"
        buttons_text += f"üÜî {button_id}: {name} - {status}\n"
    
    await message.answer(buttons_text, reply_markup=get_cancel_keyboard())
    await state.set_state(CustomButtonStates.waiting_for_button_id)
    await state.update_data(action="toggle")

@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É")
async def cmd_delete_button(message: Message, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏"""
    if not await check_admin(message):
        return
    
    buttons = db.get_custom_buttons(active_only=False)
    
    if not buttons:
        await send_error_message(message, "–ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏:", reply_markup=get_button_management_keyboard())
        return
    
    buttons_text = "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n\n"
    for button_data in buttons:
        button_id, name, url, is_active = button_data
        buttons_text += f"üÜî {button_id}: {name}\n"
    
    await message.answer(buttons_text, reply_markup=get_cancel_keyboard())
    await state.set_state(CustomButtonStates.waiting_for_button_id)
    await state.update_data(action="delete")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
@router.message(CustomButtonStates.waiting_for_button_id)
async def process_button_action(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ ID"""
    if await cancel_state(message, state):
        return
    
    try:
        button_id = int(message.text.strip())
    except ValueError:
        await send_error_message(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –∫–Ω–æ–ø–∫–∏.")
        return
    
    user_data = await state.get_data()
    action = user_data.get('action')
    
    button = db.get_custom_button_by_id(button_id)
    if not button:
        await send_error_message(message, f"–ö–Ω–æ–ø–∫–∞ —Å ID {button_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏:", reply_markup=get_button_management_keyboard())
        await state.clear()
        return
    
    button_id, name, url, is_active = button
    
    if action == "toggle":
        if db.toggle_custom_button(button_id):
            new_status = "–æ—Ç–∫–ª—é—á–µ–Ω–∞" if is_active else "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
            await send_success_message(message, f"–ö–Ω–æ–ø–∫–∞ '{name}' —É—Å–ø–µ—à–Ω–æ {new_status}!")
        else:
            await send_error_message(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É.")
        
        await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏:", reply_markup=get_button_management_keyboard())
        await state.clear()
    
    elif action == "delete":
        if db.delete_custom_button(button_id):
            await send_success_message(message, f"–ö–Ω–æ–ø–∫–∞ '{name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        else:
            await send_error_message(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É.")
        
        await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏:", reply_markup=get_button_management_keyboard())
        await state.clear()
    
    elif action == "edit":
        # –≠—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å
        await state.update_data(button_id=button_id, current_name=name, current_url=url)
        
        await message.answer(
            f"üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:\n\n"
            f"üÜî ID: {button_id}\n"
            f"üìù –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"üîó –¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: {url}\n\n"
            f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=get_button_edit_keyboard()
        )
        await state.set_state(CustomButtonStates.waiting_for_edit_choice)
    
    else:
        # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await state.update_data(button_id=button_id, current_name=name, current_url=url)
        
        await message.answer(
            f"üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:\n\n"
            f"üÜî ID: {button_id}\n"
            f"üìù –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"üîó –¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: {url}\n\n"
            f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=get_button_edit_keyboard()
        )
        await state.set_state(CustomButtonStates.waiting_for_edit_choice)