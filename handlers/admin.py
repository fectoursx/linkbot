from aiogram import Router, F, Bot, Dispatcher
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from config import get_welcome_message, update_welcome_message
from models import BroadcastByIdStates, ChannelStates
from database import db
from models import AddUserStates, EditUserStates, DeleteUserStates, BroadcastStates, WelcomeMessageStates
from utils.keyboards import (
    get_admin_keyboard, 
    get_user_action_keyboard, 
    get_cancel_keyboard,
    get_admin_inline_keyboard,
    get_main_keyboard,
    get_start_keyboard
)
from utils.helpers import (
    check_admin,
    cancel_state,
    format_user_list,
    send_error_message,
    send_success_message
)

import asyncio
import logging

logger = logging.getLogger(__name__)

router = Router()

@router.message(F.text == "üìã –ö–∞–Ω–∞–ª –¥–ª—è —Å—Å—ã–ª–æ–∫")
async def cmd_set_links_channel(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫"""
    if not await check_admin(message):
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫.\n"
        "–í–∞–∂–Ω–æ: –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.",
        reply_markup=get_cancel_keyboard()
    )
    await state.update_data(channel_type="links")
    await state.set_state(ChannelStates.waiting_for_channel_id)

@router.message(F.text == "üí¨ –ö–∞–Ω–∞–ª –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π")
async def cmd_set_messages_channel(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not await check_admin(message):
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        "–í–∞–∂–Ω–æ: –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.",
        reply_markup=get_cancel_keyboard()
    )
    await state.update_data(channel_type="messages")
    await state.set_state(ChannelStates.waiting_for_channel_id)

@router.message(ChannelStates.waiting_for_channel_id)
async def process_channel_id(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∫–∞–Ω–∞–ª–∞"""
    if await cancel_state(message, state):
        return

    channel_id = message.text.strip()
    state_data = await state.get_data()
    channel_type = state_data.get('channel_type')

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        test_message = await bot.send_message(
            chat_id=channel_id,
            text="‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞"
        )
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        await test_message.delete()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if db.set_channel(channel_type, channel_id):
            channel_type_text = "—Å—Å—ã–ª–æ–∫" if channel_type == "links" else "—Å–æ–æ–±—â–µ–Ω–∏–π"
            await send_success_message(
                message,
                f"–ö–∞–Ω–∞–ª –¥–ª—è {channel_type_text} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
            )
        else:
            await send_error_message(
                message,
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞"
            )

    except Exception as e:
        await send_error_message(
            message,
            "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "1. ID –∫–∞–Ω–∞–ª–∞ —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω–æ\n"
            "2. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª\n"
            "3. –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())
    await state.clear()


def get_display_name(user_data, username):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    user_id = user_data[0]
    username = user_data[1]
    telegram_id = user_data[2] if len(user_data) > 2 else None
    link = user_data[3] if len(user_data) > 3 else None
    full_name = user_data[4] if len(user_data) > 4 else None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å full_name –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
    if full_name and full_name.strip():
        return f"{full_name} (@{username})"
    else:
        return username

def get_display_name_from_user_info(user_info, username):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    # user_info –º–æ–∂–µ—Ç –±—ã—Ç—å (username, telegram_id, link) –∏–ª–∏ (username, telegram_id, link, full_name)
    if len(user_info) >= 4:  # –ï—Å—Ç—å –ø–æ–ª–µ full_name
        full_name = user_info[3]
        if full_name and full_name.strip():
            return f"{full_name} (@{username})"
    
    return username

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–º–µ–Ω–∞–º–∏

@router.message(F.text == "üì© –°–æ–æ–±—â–µ–Ω–∏–µ")
@router.message(Command("broadcast_by_id"))
async def cmd_broadcast_by_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast_by_id –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ ID"""
    if not await check_admin(message):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = db.get_all_users()
    if not users:
        await send_error_message(message, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.", reply_markup=get_admin_keyboard())
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö ID –∏ –∏–º–µ–Ω–∞–º–∏
    user_list = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user_data in users:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        user_id = user_data[0]
        username = user_data[1]
        telegram_id = user_data[2] if len(user_data) > 2 else None
        link = user_data[3] if len(user_data) > 3 else None
        full_name = user_data[4] if len(user_data) > 4 else None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å full_name –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
        if full_name and full_name.strip():
            display_name = f"{full_name} (@{username})"
        else:
            display_name = username
        
        user_list += f"üë§ ID: {user_id} | {display_name}"
        if telegram_id:
            user_list += f" | ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (TG ID: {telegram_id})"
        else:
            user_list += " | ‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
        user_list += "\n"
    
    user_list += "\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:"
    
    await message.answer(user_list, reply_markup=get_cancel_keyboard())
    await state.set_state(BroadcastByIdStates.waiting_for_user_id)


@router.message(BroadcastByIdStates.waiting_for_user_id)
async def process_user_id_for_broadcast(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if await cancel_state(message, state):
        return
    
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await send_error_message(
            message, 
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
    user = db.get_user_by_id(user_id)
    if not user:
        await send_error_message(
            message, 
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_admin_keyboard()
        )
        await state.clear()
        return
    
    # user = (username, telegram_id, link)
    username = user[0]
    telegram_id = user[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not telegram_id:
        await send_error_message(
            message,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ. "
            f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.",
            reply_markup=get_admin_keyboard()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        target_user_id=user_id, 
        target_username=username,
        target_telegram_id=telegram_id
    )
    
    # –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
    await message.answer(
        f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id}, TG ID: {telegram_id})\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç), –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(BroadcastByIdStates.waiting_for_content)
    
@router.message(BroadcastByIdStates.waiting_for_content)
async def process_broadcast_by_id_content(message: Message, state: FSMContext, bot: Bot):
    if await cancel_state(message, state):
        return

    data = await state.get_data()
    target_id = int(data['target_telegram_id'])

    try:
        # –°–∫–æ–ø–∏—Ä—É–µ–º –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º
        await bot.copy_message(
            chat_id=target_id,
            from_chat_id=message.chat.id,
            message_id=message.message_id
        )
        await send_success_message(
            message,
            f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {data['target_username']}."
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–ø–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:")
        await send_error_message(
            message,
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}"
        )
    finally:
        await state.clear()

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è handlers/admin.py

@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")
@router.message(Command("edituser"))
async def cmd_edit_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await check_admin(message):
        return
    
    users = db.get_all_users()
    if not users:
        await send_error_message(message, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.", reply_markup=get_admin_keyboard())
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–º–µ–Ω–∞–º–∏
    user_list = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user_data in users:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        user_id = user_data[0]
        username = user_data[1]
        telegram_id = user_data[2] if len(user_data) > 2 else None
        link = user_data[3] if len(user_data) > 3 else None
        full_name = user_data[4] if len(user_data) > 4 else None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å full_name –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
        if full_name and full_name.strip():
            display_name = f"{full_name} (@{username})"
        else:
            display_name = username
        
        user_list += f"üë§ ID: {user_id} | {display_name}"
        if telegram_id:
            user_list += " | ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
        else:
            user_list += " | ‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
        user_list += "\n"
    
    user_list += "\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    
    await message.answer(user_list, reply_markup=get_cancel_keyboard())
    await state.set_state(EditUserStates.waiting_for_user_id)

@router.message(EditUserStates.waiting_for_user_id)
async def process_edit_user_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    if await cancel_state(message, state):
        return
    
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await send_error_message(
            message, 
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user_by_id(user_id)
    if not user:
        await send_error_message(
            message, 
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_admin_keyboard()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(user_id=user_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = user[0]
    telegram_id = user[1] if len(user) > 1 else None
    link = user[2] if len(user) > 2 else None
    full_name = user[3] if len(user) > 3 else None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å full_name –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
    if full_name and full_name.strip():
        display_name = f"{full_name} (@{username})"
    else:
        display_name = username
    
    info_text = (
        f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
        f"üë§ –ò–º—è: {display_name}\n"
        f"üìù –õ–æ–≥–∏–Ω: {username}\n"
        f"üÜî ID: {user_id}\n"
        f"üì± Telegram ID: {telegram_id or '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}\n"
        f"üîó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {link or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
        f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    )
    
    await message.answer(info_text, reply_markup=get_user_action_keyboard())
    await state.set_state(EditUserStates.waiting_for_action)


@router.message(EditUserStates.waiting_for_action)
async def process_edit_action(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if await cancel_state(message, state):
        return
    
    action = message.text.strip()
    
    if action == "–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω:", reply_markup=get_cancel_keyboard())
        await state.set_state(EditUserStates.waiting_for_new_username)
    elif action == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:", reply_markup=get_cancel_keyboard())
        await state.set_state(EditUserStates.waiting_for_new_password)
    else:
        await send_error_message(
            message, 
            "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.",
            reply_markup=get_user_action_keyboard()
        )

@router.message(EditUserStates.waiting_for_new_username)
async def process_new_username_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∏–Ω–∞"""
    if await cancel_state(message, state):
        return
    
    new_username = message.text.strip()
    user_data = await state.get_data()
    user_id = user_data.get('user_id')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω
    existing_user = db.get_user_by_username(new_username)
    if existing_user and existing_user[0] != user_id:  # existing_user[0] - —ç—Ç–æ ID
        await send_error_message(
            message, 
            f"–õ–æ–≥–∏–Ω '{new_username}' —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
            reply_markup=get_admin_keyboard()
        )
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏–Ω
    if db.update_username(user_id, new_username):
        await send_success_message(
            message, 
            f"–õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_username}'",
            reply_markup=get_admin_keyboard()
        )
    else:
        await send_error_message(
            message, 
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=get_admin_keyboard()
        )
    
    await state.clear()

@router.message(EditUserStates.waiting_for_new_password)
async def process_new_password_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
    if await cancel_state(message, state):
        return
    
    new_password = message.text.strip()
    user_data = await state.get_data()
    user_id = user_data.get('user_id')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    if db.update_password(user_id, new_password):
        await send_success_message(
            message, 
            f"–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_password}'",
            reply_markup=get_admin_keyboard()
        )
    else:
        await send_error_message(
            message, 
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=get_admin_keyboard()
        )
    
    await state.clear()

@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å")
@router.message(Command("deleteuser"))
async def cmd_delete_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await check_admin(message):
        return
    
    users = db.get_all_users()
    if not users:
        await send_error_message(message, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.", reply_markup=get_admin_keyboard())
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–º–µ–Ω–∞–º–∏
    user_list = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user_data in users:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        user_id = user_data[0]
        username = user_data[1]
        telegram_id = user_data[2] if len(user_data) > 2 else None
        link = user_data[3] if len(user_data) > 3 else None
        full_name = user_data[4] if len(user_data) > 4 else None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å full_name –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
        if full_name and full_name.strip():
            display_name = f"{full_name} (@{username})"
        else:
            display_name = username
        
        user_list += f"üë§ ID: {user_id} | {display_name}"
        if telegram_id:
            user_list += " | ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
        else:
            user_list += " | ‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
        user_list += "\n"
    
    user_list += "\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    
    await message.answer(user_list, reply_markup=get_cancel_keyboard())
    await state.set_state(DeleteUserStates.waiting_for_user_id)

@router.message(DeleteUserStates.waiting_for_user_id)
async def process_delete_user_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if await cancel_state(message, state):
        return
    
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await send_error_message(
            message, 
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user_by_id(user_id)
    if not user:
        await send_error_message(
            message, 
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_admin_keyboard()
        )
        await state.clear()
        return
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = user[0]
    telegram_id = user[1] if len(user) > 1 else None
    link = user[2] if len(user) > 2 else None
    full_name = user[3] if len(user) > 3 else None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å full_name –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
    if full_name and full_name.strip():
        display_name = f"{full_name} (@{username})"
    else:
        display_name = username
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if db.delete_user(user_id):
        await send_success_message(
            message, 
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{display_name}' (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            reply_markup=get_admin_keyboard()
        )
    else:
        await send_error_message(
            message, 
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{display_name}' (ID: {user_id})",
            reply_markup=get_admin_keyboard()
        )
    
    await state.clear()

# –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
@router.message(Command("broadcast"))
async def cmd_broadcast(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not await check_admin(message):
        return
    
    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç), "
        "–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(BroadcastStates.waiting_for_content)

@router.message(BroadcastStates.waiting_for_content)
async def process_broadcast_content(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if await cancel_state(message, state):
        return
    
    users = db.get_all_users()
    sent_count = 0
    failed_count = 0
    
    progress_msg = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    for user_id, username, telegram_id, _ in users:
        if telegram_id and telegram_id != message.from_user.id:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            try:
                success = False
                
                # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if message.text and not message.media_group_id:
                    text = message.text.strip()
                    formatted_message = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó:</b>\n\n{text}"
                    await bot.send_message(
                        telegram_id,
                        formatted_message,
                        parse_mode="HTML"
                    )
                    success = True
                
                # –§–æ—Ç–æ
                elif message.photo:
                    photo = message.photo[-1]
                    caption = message.caption or "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó</b>"
                    formatted_caption = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó:</b>\n\n{caption}" if message.caption else caption
                    
                    await bot.send_photo(
                        telegram_id,
                        photo=photo.file_id,
                        caption=formatted_caption,
                        parse_mode="HTML"
                    )
                    success = True
                
                # –í–∏–¥–µ–æ
                elif message.video:
                    caption = message.caption or "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó</b>"
                    formatted_caption = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó:</b>\n\n{caption}" if message.caption else caption
                    
                    await bot.send_video(
                        telegram_id,
                        video=message.video.file_id,
                        caption=formatted_caption,
                        parse_mode="HTML"
                    )
                    success = True
                
                # –ê—É–¥–∏–æ
                elif message.audio:
                    caption = message.caption or "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó</b>"
                    formatted_caption = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó:</b>\n\n{caption}" if message.caption else caption
                    
                    await bot.send_audio(
                        telegram_id,
                        audio=message.audio.file_id,
                        caption=formatted_caption,
                        parse_mode="HTML"
                    )
                    success = True
                
                # –î–æ–∫—É–º–µ–Ω—Ç
                elif message.document:
                    caption = message.caption or "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó</b>"
                    formatted_caption = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó:</b>\n\n{caption}" if message.caption else caption
                    
                    await bot.send_document(
                        telegram_id,
                        document=message.document.file_id,
                        caption=formatted_caption,
                        parse_mode="HTML"
                    )
                    success = True
                
                # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif message.voice:
                    caption = message.caption or "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó</b>"
                    formatted_caption = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó:</b>\n\n{caption}" if message.caption else caption
                    
                    await bot.send_voice(
                        telegram_id,
                        voice=message.voice.file_id,
                        caption=formatted_caption,
                        parse_mode="HTML"
                    )
                    success = True
                
                # –°—Ç–∏–∫–µ—Ä
                elif message.sticker:
                    await bot.send_sticker(
                        telegram_id,
                        sticker=message.sticker.file_id
                    )
                    success = True
                
                # –ê–Ω–∏–º–∞—Ü–∏—è (GIF)
                elif message.animation:
                    caption = message.caption or "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó</b>"
                    formatted_caption = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó:</b>\n\n{caption}" if message.caption else caption
                    
                    await bot.send_animation(
                        telegram_id,
                        animation=message.animation.file_id,
                        caption=formatted_caption,
                        parse_mode="HTML"
                    )
                    success = True
                
                if success:
                    sent_count += 1
                else:
                    failed_count += 1
                
                if sent_count % 10 == 0:
                    await progress_msg.edit_text(f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π...")
                
                await asyncio.sleep(0.1)
                
            except Exception as e:
                failed_count += 1
                logger.error(f"Failed to send message to user {username} (ID: {user_id}): {e}")
    
    result_message = f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n- –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n- –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count}"
    await send_success_message(message, result_message)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())
    await state.clear()

async def check_admin_and_get_users(message: Message) -> list:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not await check_admin(message):
        return None
        
    users = db.get_all_users()
    if not users:
        await send_error_message(message, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.", reply_markup=get_admin_keyboard())
        return None
    return users

@router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    users = await check_admin_and_get_users(message)
    if not users:
        return
    
    report = format_user_list(users)
    if users:
        report += "\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /adduser"
    
    await message.answer(report)
    await message.answer(
        "–§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_admin_keyboard()
    )

@router.message(F.text == "üè™ –î–æ–±–∞–≤–∏—Ç—å")
@router.message(Command("adduser"))
async def cmd_add_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /adduser"""
    if not await check_admin(message):
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=get_cancel_keyboard())
    await state.set_state(AddUserStates.waiting_for_username)

@router.message(AddUserStates.waiting_for_username)
async def process_new_username(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if await cancel_state(message, state):
        return
    
    username = message.text.strip()
    if db.get_user_by_username(username):
        await send_error_message(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω.")
        return
    
    await state.update_data(username=username)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=get_cancel_keyboard())
    await state.set_state(AddUserStates.waiting_for_password)

@router.message(AddUserStates.waiting_for_password)
async def process_new_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if await cancel_state(message, state):
        return
        
    password = message.text.strip()
    user_data = await state.get_data()
    username = user_data.get('username')
    
    if db.add_user(username, password):
        await send_success_message(
            message,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n–õ–æ–≥–∏–Ω: {username}\n–ü–∞—Ä–æ–ª—å: {password}"
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())
    else:
        await send_error_message(
            message, 
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–º–æ–∂–Ω–æ, –ª–æ–≥–∏–Ω '{username}' —É–∂–µ –∑–∞–Ω—è—Ç.",
            reply_markup=get_admin_keyboard()
        )
    
    await state.clear()

@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
@router.message(Command("edit_welcome"))
async def cmd_edit_welcome(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not await check_admin(message):
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    await message.answer(
        f"–¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{get_welcome_message()}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É:\n"
        f"‚Ä¢ –ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞: <a href='https://example.com'>—Ç–µ–∫—Å—Ç</a>\n"
        f"‚Ä¢ –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç: <b>—Ç–µ–∫—Å—Ç</b>\n"
        f"‚Ä¢ –ö—É—Ä—Å–∏–≤: <i>—Ç–µ–∫—Å—Ç</i>\n\n"
        f"–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞:",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(WelcomeMessageStates.waiting_for_message)

@router.message(WelcomeMessageStates.waiting_for_message)
async def process_welcome_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if await cancel_state(message, state):
        return
    
    new_welcome_message = message.text.strip()
    if not new_welcome_message:
        await send_error_message(message, "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=get_admin_keyboard())
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å HTML
        test_msg = await message.answer(
            new_welcome_message,
            parse_mode="HTML"
        )
        await test_msg.delete()
        
        # –ï—Å–ª–∏ HTML –≤–∞–ª–∏–¥–Ω—ã–π, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update_welcome_message(new_welcome_message):
            await send_success_message(message, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            await send_error_message(
                message,
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                reply_markup=get_admin_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Failed to validate HTML in welcome message: {e}")
        await send_error_message(
            message,
            "–û—à–∏–±–∫–∞ –≤ HTML-—Ä–∞–∑–º–µ—Ç–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–µ–≥–æ–≤.",
            reply_markup=get_admin_keyboard()
        )
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())
    await state.clear()

def setup(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    dp.include_router(router)
