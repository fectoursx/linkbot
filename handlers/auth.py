from aiogram import Router, F, Bot, Dispatcher, types
from aiogram.types import Message, BufferedInputFile, ReplyKeyboardRemove, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from io import BytesIO
import os
import logging

logger = logging.getLogger(__name__)

from datetime import datetime
from database import db
from models import AuthStates, RegistrationStates
from config import ADMIN_IDS, BOT_NAME, get_welcome_message
from utils.keyboards import get_start_keyboard, get_main_keyboard, get_admin_keyboard, get_admin_inline_keyboard, get_auth_keyboard
from utils.captcha import generate_captcha_text, generate_captcha_image
from utils.helpers import send_error_message, send_success_message, cancel_state

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–°—Ç–∞—Ä—Ç" –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_start_button():
    kb = [
        [InlineKeyboardButton(text='üöÄ –°—Ç–∞—Ä—Ç', callback_data='start_bot')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

@router.message(CommandStart())
@router.callback_query(F.data == "start_bot")
async def cmd_start(event: Message | types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ä—Ç"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ —ç—Ç–æ: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback
    is_callback = isinstance(event, types.CallbackQuery)
    
    if is_callback:
        # –ï—Å–ª–∏ —ç—Ç–æ callback, —Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await event.answer()
        message = event.message
        user_id = event.from_user.id
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        message = event
        user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = db.get_user_by_telegram_id(user_id)
    
    if user:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        is_admin = user_id in ADMIN_IDS
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user[1]}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω—É–∂–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if is_admin:
            # –î–ª—è –∞–¥–º–∏–Ω–∞ - –æ–±–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await message.answer(
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏:", 
                reply_markup=get_admin_inline_keyboard()
            )
            await message.answer(
                "–§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:", 
                reply_markup=get_admin_keyboard()
            )
        else:
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–æ–ª—å–∫–æ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                reply_markup=get_main_keyboard()
            )
        
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    # –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ø—á—É
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏
    captcha_text = generate_captcha_text()
    captcha_image = generate_captcha_image(captcha_text)
    
    await state.update_data(captcha_text=captcha_text)
    
    await message.answer(
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –í aiogram 3.x –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–π—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º BufferedInputFile –≤–º–µ—Å—Ç–æ FSInputFile
    await message.answer_photo(
        BufferedInputFile(captcha_image, filename="captcha.png")
    )
    await state.set_state(AuthStates.waiting_for_captcha)

@router.message(AuthStates.waiting_for_captcha)
async def process_captcha(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_input = message.text.strip().upper()
    user_data = await state.get_data()
    captcha_text = user_data.get('captcha_text')
    
    if user_input != captcha_text:
        await send_error_message(
            message, 
            "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=get_start_button()
        )
        await state.clear()
        return
    
    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ø—á–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
    await message.answer(
        "–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_auth_keyboard()
    )
    await state.clear()

@router.message(Command("register"))
@router.message(F.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def cmd_register(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await message.answer(
        "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(RegistrationStates.waiting_for_username)

@router.message(RegistrationStates.waiting_for_username)
async def process_registration_username(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    username = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –ª–æ–≥–∏–Ω
    if db.get_user_by_username(username):
        await send_error_message(
            message,
            f"–õ–æ–≥–∏–Ω '{username}' —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ª–æ–≥–∏–Ω–∞
    if len(username) < 3:
        await send_error_message(
            message,
            "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."
        )
        return
    
    if len(username) > 20:
        await send_error_message(
            message,
            "–õ–æ–≥–∏–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return
    
    await state.update_data(username=username)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(RegistrationStates.waiting_for_password)

@router.message(RegistrationStates.waiting_for_password)
async def process_registration_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    password = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è
    if len(password) < 6:
        await send_error_message(
            message,
            "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return
    
    await state.update_data(password=password)
    await message.answer(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(RegistrationStates.waiting_for_password_confirm)

@router.message(RegistrationStates.waiting_for_password_confirm)
async def process_registration_password_confirm(message: Message, state: FSMContext, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    password_confirm = message.text.strip()
    user_data = await state.get_data()
    username = user_data.get('username')
    password = user_data.get('password')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
    if password != password_confirm:
        await send_error_message(
            message,
            "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(RegistrationStates.waiting_for_password)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    full_name = message.from_user.full_name
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º –∏–º–µ–Ω–µ–º
    if db.add_user(username, password, full_name):
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = db.authenticate_user(username, password)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram ID —Å –ø–æ–ª–Ω—ã–º –∏–º–µ–Ω–µ–º
        db.update_telegram_id(user_id, message.from_user.id, full_name)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await send_admin_notification_registration(bot, username, full_name, message.from_user.id)
        
        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–í–∞—à –ª–æ–≥–∏–Ω: {username}\n"
            f"–í–∞—à –ø–∞—Ä–æ–ª—å: {password}\n\n"
            f"–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ö–æ–¥–∞."
        )
        
        # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
        logo_path = "assets/logo.jpg"
        
        if os.path.exists(logo_path):
            try:
                await message.answer_photo(
                    FSInputFile(logo_path),
                    caption=get_welcome_message(),
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Error sending welcome message with photo: {e}")
                await message.answer_photo(
                    FSInputFile(logo_path),
                    caption=get_welcome_message()
                )
        else:
            try:
                await message.answer(
                    get_welcome_message(),
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Error sending welcome message: {e}")
                await message.answer(get_welcome_message())
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        is_admin = message.from_user.id in ADMIN_IDS
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if is_admin:
            await message.answer(
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏:",
                reply_markup=get_admin_inline_keyboard()
            )
            await message.answer(
                "–§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=get_admin_keyboard()
            )
        else:
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_keyboard()
            )
        
        await state.clear()
    else:
        await send_error_message(
            message,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.clear()
    
@router.message(Command("login"))
@router.message(F.text == "üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
async def cmd_login(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –¥–ª—è –≤—Ö–æ–¥–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AuthStates.waiting_for_username)

@router.message(AuthStates.waiting_for_username)
async def process_username(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    username = message.text.strip()
    await state.update_data(username=username)
    
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AuthStates.waiting_for_password)

async def send_admin_notification(bot: Bot, username, user_full_name, user_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        notification_text = (
            f"üîî –ù–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_full_name}\n"
            f"üÜî Telegram ID: {user_id}\n"
            f"üìù –õ–æ–≥–∏–Ω: {username}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, notification_text)
                logger.info(f"Admin notification sent to {admin_id}")
            except Exception as e:
                logger.error(f"Failed to send notification to admin {admin_id}: {e}")
                
    except Exception as e:
        logger.error(f"Failed to send admin notification: {e}")

async def send_admin_notification_registration(bot: Bot, username, user_full_name, user_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        notification_text = (
            f"üÜï –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_full_name}\n"
            f"üÜî Telegram ID: {user_id}\n"
            f"üìù –õ–æ–≥–∏–Ω: {username}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, notification_text)
                logger.info(f"Admin notification sent to {admin_id}")
            except Exception as e:
                logger.error(f"Failed to send notification to admin {admin_id}: {e}")
                
    except Exception as e:
        logger.error(f"Failed to send admin notification: {e}")

@router.message(AuthStates.waiting_for_password)
async def process_password(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    password = message.text.strip()
    user_data = await state.get_data()
    username = user_data.get('username')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    user_id = db.authenticate_user(username, password)
    
    if not user_id:
        await send_error_message(
            message, 
            "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        # Return to username input state
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –¥–ª—è –≤—Ö–æ–¥–∞:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(AuthStates.waiting_for_username)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    full_name = message.from_user.full_name
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º –∏–º–µ–Ω–µ–º
    db.update_telegram_id(user_id, message.from_user.id, full_name)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    await send_admin_notification(bot, username, full_name, message.from_user.id)
    
    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    await message.answer(
        f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {full_name}!"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
    logo_path = "assets/logo.jpg"
    
    if os.path.exists(logo_path):
        try:
            await message.answer_photo(
                FSInputFile(logo_path),
                caption=get_welcome_message(),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"Error sending welcome message with photo: {e}")
            await message.answer_photo(
                FSInputFile(logo_path),
                caption=get_welcome_message()
            )
    else:
        try:
            await message.answer(
                get_welcome_message(),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"Error sending welcome message: {e}")
            await message.answer(get_welcome_message())
    
    is_admin = message.from_user.id in ADMIN_IDS
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
    if is_admin:
        # –î–ª—è –∞–¥–º–∏–Ω–∞: —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
        await message.answer(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏:",
            reply_markup=get_admin_inline_keyboard()
        )
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        await message.answer(
            "–§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=get_admin_keyboard()
        )
    else:
        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø—Ä–æ—Å—Ç–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
    
    await state.clear()

@router.message(Command("logout"))
@router.message(F.text == "üö™ –í—ã–π—Ç–∏")
@router.callback_query(F.data == "logout")
async def cmd_logout(event: Message | types.CallbackQuery):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ —ç—Ç–æ: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback
    is_callback = isinstance(event, types.CallbackQuery)
    
    if is_callback:
        # –ï—Å–ª–∏ —ç—Ç–æ callback, —Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        await event.answer()
        message = event.message
        user_id = event.from_user.id
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        message = event
        user_id = message.from_user.id
    
    user = db.get_user_by_telegram_id(user_id)
    
    if not user:
        text = "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã."
        if is_callback:
            await message.answer(f"‚ùå {text}", reply_markup=get_start_button())
        else:
            await send_error_message(message, text, reply_markup=get_start_button())
        return
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram ID –∫ –∞–∫–∫–∞—É–Ω—Ç—É
    db.update_telegram_id(user[0], None)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    await message.answer(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.",
        reply_markup=get_start_button()
    )

def setup(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    dp.include_router(router)